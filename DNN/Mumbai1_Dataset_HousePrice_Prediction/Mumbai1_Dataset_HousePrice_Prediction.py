# -*- coding: utf-8 -*-
"""Copy of Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hkh7MC2a-x_NpQ1f5BPHXdpTJf0-MAAh

House Price Prediction for Mumbai1 Dataset Based on 17 Different Predictors

Binary Variable:: 
New/Resale,
Gymnasium,
Lift Available,
Car Parking,
Maintenance Staff,
24x7 Security,
Children's Play Area,
Clubhouse,
Intercom,
Landscaped Gardens,
Indoor Games,
Gas Connection,
Jogging Track,
Swimming Pool

Other Variables::
Price,
Area,
Location,
No. of Bedrooms

Here we are using deep neural network to build model and fit our data.

Import Libraries & Read Dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Mumbai1.csv')

df.head()

"""#Data Cleaning & Data Visualisation"""

df = df.drop('Unnamed: 0',axis=1)

from sklearn.preprocessing import LabelEncoder 
df['Location'] = LabelEncoder().fit_transform(df['Location']) 
df[['Location', 'Location']] # special syntax to get just these two columns

df.head()

#check number of null value for each attribute
df.isnull().sum()

df.describe().transpose()

plt.figure(figsize=(10,6))
sns.distplot(df['Price'])

df.sort_values('Price',ascending=False).head(10)

"""Remove 7% data which has rare values for 'Price'"""

len(df)*(0.07)

non_top_1_perc = df.sort_values('Price',ascending=False).iloc[444:]

non_top_1_perc['Price'] = pd.to_numeric(non_top_1_perc['Price'])

non_top_1_perc = non_top_1_perc[non_top_1_perc['Price'] != 0]

non_top_1_perc

plt.figure(figsize=(12,8))
sns.distplot(non_top_1_perc['Price'])

sns.countplot(non_top_1_perc['No. of Bedrooms'])

"""Remove 10 data which has rare values for 'No. of Bedrooms'"""

non_top_1_perc = df.sort_values('No. of Bedrooms',ascending=False).iloc[10:]

non_top_1_perc

"""Remove 10 data which has rare values for 'Area'"""

non_top_1_perc = df.sort_values('Area',ascending=False).iloc[10:]

non_top_1_perc

plt.figure(figsize=(12,8))
sns.scatterplot(x='Price',y='Area',data=non_top_1_perc)

sns.boxplot(x='No. of Bedrooms',y='Price',data=non_top_1_perc)

non_top_1_perc.info()



"""#Train & Test Split"""

X = non_top_1_perc.drop('Price',axis=1)
y = non_top_1_perc['Price']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.35,random_state=41)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

X_train= scaler.fit_transform(X_train)

X_test= scaler.transform(X_test)

X_train.shape
X_test.shape

"""#Building a Model (Neural Network)"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers import Adam

"""Using Dropout to decrease density of network"""

model = Sequential()

model.add(Dense(17,activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(16,activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(15,activation='relu'))
model.add(Dropout(0.25))
model.add(Dense(14,activation='relu'))
model.add(Dropout(0.25))

model.add(Dense(1))

model.compile(optimizer='adam',loss='mse')

model.fit(x=X_train,y=y_train.values,
          validation_data=(X_test,y_test.values),epochs=130)

losses = pd.DataFrame(model.history.history)

losses.plot()

"""#Evaluating The Model"""

from sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score

X_test

predictions = model.predict(X_test)

mean_absolute_error(y_test,predictions)

np.sqrt(mean_squared_error(y_test,predictions))

explained_variance_score(y_test,predictions)

# Our predictions
plt.scatter(y_test,predictions)

# Perfect predictions
plt.plot(y_test,y_test,'r')

"""Predicting Price According to This Model For Values of 786 Row"""

a = non_top_1_perc.drop('Price',axis=1).iloc[786]

a = scaler.transform(a.values.reshape(-1,17))

price=model.predict(a)
print("Predictated Price For This Instance Values ",int(price), "USD")
print("Actual Price in Dataset ",non_top_1_perc['Price'].iloc[786])